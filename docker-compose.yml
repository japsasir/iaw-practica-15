# Cogemos la plantilla básica de docker-compose.yml.
# Para otras practicas, docker-compose.env guardará las variables de entorno.
# La versión puede ser necesaria para compatibilidad
version: '3.4'

# Cada servicio requiere un contenedor
services:

# Servicio Phpmyadmin
phpmyadmin:
    # Imagen Docker
    image: phpmyadmin
    # Entorno empleado. Ver anexo al final del documento.
    environment:
        - PMA_ARBITRARY=1
    # Redirección de puertos. 
    ports:
        - 8080:80
    # Redes empleadas
    networks:
        - frontend-network
        - backend-network
    # Establecemos dependencias
    depends_on:
        - mysql
    # Si hay fallo en el servicio, se reinicia.
    restart: always

# Servicio MySQL
  mysql:
    image:: 
    ports:
      - "5000:5000"
    volumes:
      - .:/code
      - logvolume01:/var/log
    links:
      - redis
  redis:
    image: redis
volumes:
  logvolume01: {}

# Servicio Wordpress
wordpress:
    image:: 
    ports:
      - "5000:5000"
    volumes:
      - .:/code
      - logvolume01:/var/log
    links:
      - redis
  redis:
    image: redis
volumes:
  logvolume01: {}

# Definimos las dos redes necesarias. Ojo con la indentación
networks:
    frontend-network:
    backend-network:

# Definimos los volúmenes disponibles
volumes:    
    mysql_data:
    wordpress_data:



# Anexo: sobre 'PMA' (PhpMyAdmin)
# Podemos fijar dos variables de entorno. PMA_HOST y PMA_ARBITRARY=1
# PMA_HOST nos permite indicar el nombre del contenedor con el que quiero conectarme desde phpMyAdmin.
# PMA_ARBITRARY=1 nos ofrecerá un cuadro de texto en el login de phpMyAdmin, indicando el nombre del contenedor al que quieres conectarte.